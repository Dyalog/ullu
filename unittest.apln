:Namespace unittest
    ⎕LX←'unittest.RunAll ⍬'

    RunAll←{
        t←#.magnitude #.membership #.indexof #.residue
        ⎕←'Testing for:',t
        RunTests¨t
    }

    GetTests←{ ⍝ ⍵ is a ref to a namespace containing functions called test_*
        tests←'test_.+'⎕S'&'⍵.⎕NL ¯3
        tests←('.', ⍨⍕⍵)∘, ¨tests
        tests
    }

    FAIL_OK←'[FAIL]' '[OK]' ⍝ 1+bool will give fail and ok on 0 and 1

    ⍝ Pretty print test result
    PPTestResult←{⍵[2], ⍵[3], ': ', FAIL_OK[1+⍵[1]]}

    ∇ r←tData Assert r ;r;tID;tCmt ⍝ to output result of tests
        (tID tCmt)←tData
        ⎕RL←rl ⍝ Reset ⎕RL after each test
        :If (~r)∧stop
            PPTestResult r tID tCmt
            'Stopping on failure of:' ⎕SIGNAL 500
        :EndIf
        :If verbose
            PPTestResult r tID tCmt
        :ElseIf ~r∨stop
            PPTestResult r tID tCmt
        :EndIf
    ∇

    ⍝ This function runs the tests
    ⍝ It takes 4 mandatory arguments [test_namespace] [verbose= 1|0] [stop=1|0] [⎕RL=any seed value] (0 default)
    ∇ RunTests args ;st;testNS;tests;i;tList;expr;t;r;nPass;nFail;randLink
        st←⎕AI[2] ⍝ Start time of execution of tests 
        ⎕←''
        :Section parseArguments ⍝ This section parses and verifies input arguments
            'missing or extra arguments. Correct usage is: [test_namespace] [verbose= 1|0] [stop=1|0] [⎕RL=any seed value(0 for random)] (0 default)'⎕SIGNAL ((≢args)∊⍳4)↓11
            (testNS verbose stop randLink)←4↑args,0 0 0 0
            'Verbose can only be 0 or 1'⎕SIGNAL (verbose ∊ 0 1)↓11
            'Stop can only be 0 or 1'⎕SIGNAL (stop ∊ 0 1)↓11

            ⍝ 0 is used to generate a random seed value and the random value is the noted in the logs
            ⎕RL←rl←{⍵≡0:(?(¯2+2*31))⋄⍵} randLink
            ⎕←'Options:'
            ⎕←(6⍴' '),'⎕RL is set to:', {0∊⍴⍵:' ⍬'⋄⍵}rl
            :If verbose
                ⎕←(6⍴' '),'verbose:', verbose
                ⎕←(6⍴' '),'stop:', stop ⋄ ⎕←''
            :EndIf
        :EndSection
        
        :Section FetchTests
            tests←GetTests testNS
            'no tests found'⎕SIGNAL (~(0=≢tests))↓11
        :EndSection
        
        :Section ExecuteTests
            tList←⍳≢tests
            r←⍬
            :For i :In tList
                ⎕←''⋄tests[i]⋄⎕←''
                t←i⊃tests
                r,←⍎expr←t
            :EndFor
        :EndSection

        :Section EvalResult            
            nPass←(+/,)r ⋄ nFail←(≢r)-nPass
            ⎕←''⋄⎕←'Tests completed: ', (≢r), 'ran,', nFail, 'failed test,', nPass, 'successes in', ((⎕AI[2]-st)÷1000), 's'⋄⎕←''
        :EndSection
    ∇

:EndNamespace