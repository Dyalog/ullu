:Namespace test_indexof
    Assert←#.unittest.Assert

        ⍝ Run Variations of each test with normal, empty and multiple shaped data
    ∇ tRes←tData RunVariations exp ;actualR;actualRE;expectedR;left;right;res;tID;tCmt;lshape;lshapeW0;rshape;x;actualRM
        (expectedR left right)←exp
        (tID tCmt)←tData
        tRes←⍬

        expectedR←expectedR⍝-~⎕IO ⍝ expectedR is defaulted to ⎕IO←1

        ⍝ normal
        actualR←left⍳right
        tRes,←tData Assert expectedR≡actualR

        ⍝ empty left
        actualRE←(0⍴⊂left)⍳right ⍝ generating empty array from right
        tRes,←('Empty',tID) tCmt Assert ((1⍨¨expectedR)-~⎕IO)≡actualRE ⍝ empty array is expectedR
    ∇
    
    ∇ r←Test_indexof ;⎕CT;⎕DCT;ct;⎕FR;fr;⎕IO;io;ct_default;dct_default;fr_dbl;fr_decf;io_default;io_0;bool;i1;char1;char2;i2;char3;i3;ptr;dbl;Hdbl;fl;Hfl;cmplx;Hcmplx;case;case2;data;testDesc;desc
        ct_default←1E¯14
        dct_default←1E¯28
        fr_dbl←645
        fr_decf←1287
        io_default←1
        io_0←0
        
        bool←0 1                                      ⍝ 11: 1 bit Boolean type arrays
        i1←¯60+⍳120                                   ⍝ 83: 8 bits signed integer
        char1←⎕UCS ⍳255                               ⍝ 80: 8 bits character
        char2←⎕UCS (1000+⍳100)                        ⍝ 160: 16 bits character
        i2←{⍵,-⍵}10000+⍳100                           ⍝ 163: 16 bits signed integer
        char3←⎕UCS (100000+⍳100)                      ⍝ 320: 32 bits character
        i3←{⍵,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        ptr←2,/⎕A                                     ⍝ 326: Pointer (32-bit or 64-bit as appropriate)
        dbl←{⍵,-⍵}i3+0.1                              ⍝ 645: 64 bits Floating
        cmplx←{⍵,-⍵}(0J1×⍳100)+⌽⍳100                  ⍝ 1289: 128 bits Complex
        ⍝ Hdbl is 645 but higher order to test for CT value
        ⍝ intervals of 2 are chosen because CT for these numbers +1 and -1
        ⍝ come under the region of tolerant equality
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)
        ⍝ Hfl is 1287 but higher order to test for CT value
        ⍝ far intervals are chosen for non overlap 
        ⍝ with region of tolerant equality
        ⎕FR←fr_decf
        fl←{⍵,-⍵}i3+0.01                              ⍝ 1287: 128 bits Decimal
        Hfl←{⍵,-⍵}2E29+(1E16×⍳10)
        ⎕FR←fr_dbl 
        Hcmplx←{⍵,-⍵}(1E14J1E14×⍳20)                  ⍝ 1289 but higher order to test for CT value

        r←⍬
        testDesc←{'for ',case,{0∊⍴case2:'',⍵⋄' , ', case2,⍵},' & ⎕CT ⎕DCT:',⎕CT,⎕DCT, '& ⎕FR:', ⎕FR, '& ⎕IO:', ⎕IO}

        :For io :In io_default io_0
            ⎕IO←io

            :For ct :In 1 0 
                (⎕CT ⎕DCT)←ct × ct_default dct_default ⍝ set comparision tolerance

                :For fr :In fr_dbl fr_decf
                    ⎕FR←fr

                    :For io :In io_default io_0
                        ⎕IO←io
                        case←⍬
                        case2←⍬
                        desc←testDesc⍬
                        r,← 'T0' desc RunVariations ⍬ ⍬ ⍬ ⍝ Niladic gives Niladic
                        
                        :For case :In 'bool' 'i1' 'i2' 'i3' 'char1' 'char2' 'char3' 'ptr' 'dbl' 'fl' 'cmplx' 'Hdbl' 'Hfl' 'Hcmplx'
                            data←∪⍎case ⍝ remove repeating 0s
                            desc←testDesc⍬
                            r,← 'T1' desc RunVariations (⍳≢data) data data ⍝ all elements of data are indexed
                            r,← 'T2' desc RunVariations (⎕IO+⊃⍴data) data 1E50 ⍝ random huge element is not found
                            d←data[pos←?≢data] ⍝ element from random position is chosen
                            r,← 'T3' desc RunVariations pos data d ⍝ element from random position exists
                        :EndFor
                    :EndFor
                :EndFor
            :EndFor
        :EndFor
    ∇
:EndNamespace