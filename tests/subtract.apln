:Namespace subtract
    Assert←#.unittest.Assert
    stripToSameLen←#.utils.stripToSameLen
    isDyalogClassic←#.utils.isClassic

    model←{
        ⍺+-⍵
    }

    ∇ tRes←tData RunVariations exp;expectedR;larg;rarg;tID;tCmt;actualR;actualRE;shape;actualRS;shapeW0;actualRSW0
        (expectedR larg rarg)←exp
        (tID tCmt)←tData
        tRes←⍬

        ⍝ normal
        actualR←larg-rarg
        tRes,←tData Assert expectedR≡actualR

        ⍝ empty
        actualRE←(0⍴larg)-(0⍴rarg) ⍝ 0 in the shape means we have no elements in the array, i.e. it's empty.
        tRes,←('EmptyL',tID) tCmt Assert ⍬≡actualRE ⍝ empty array is expectedR

        ⍝ different shapes
        shape←?(?4)/4
        actualRS←(shape⍴larg)-(shape⍴rarg)
        tRes,←('Multiple',tID) tCmt Assert (shape⍴expectedR)≡actualRS

        ⍝ different shapes with 0 in shape
        shapeW0←(0@(?(≢shape)))shape
        actualRSW0←(shapeW0⍴larg)-(shapeW0⍴rarg)
        tRes,←('ShapeW0',tID) tCmt Assert (shapeW0⍴0) ≡ actualRSW0
    ∇

    ∇ r←test_substract
        fr_dbl←645
        fr_decf←1287

        ⍝ All data generated is unique
        bool←0 1                                      ⍝ 11: 1 bit Boolean type arrays
        i1←{⍵,-⍵}⍳120                                 ⍝ 83: 8 bits signed integer
        i2←{⍵,-⍵}10000+⍳100                           ⍝ 163: 16 bits signed integer
        i3←{⍵,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        char0←⎕AV                                     ⍝ 82: DyalogAPL classic char set
        :If ~isDyalogClassic
            char1←⎕UCS (100+⍳100)                     ⍝ 80: 8 bits character
            char2←⎕UCS (1000+⍳100)                    ⍝ 160: 16 bits character
            char3←⎕UCS (100000+⍳100)                  ⍝ 320: 32 bits character
        :EndIf
        charptr←(13↑⎕a) (13↓⎕a)                       ⍝ 326: Pointer (32-bit or 64-bit as appropriate)
        dbl←{⍵,-⍵}i3+0.1                              ⍝ 645: 64 bits Floating
        cmplx←{⍵,-⍵}(0J1×⍳100)+⌽⍳100                  ⍝ 1289: 128 bits Complex
        Hcmplx←{⍵,-⍵}(1E14J1E14×⍳20)                  ⍝ 1289 but larger numbers to test for CT value
        ⍝ Hdbl is 645 but larger numbers to test for CT value
        ⍝ intervals of 2 are chosen because CT for these numbers +1 and -1
        ⍝ come under the region of tolerant equality
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)                       ⍝ 645: large numbers
        Sdbl←{⍵,-⍵}(⍳500)÷1000                        ⍝ 645: Small numbers

        ⍝ Hfl is 1287 but larger numbers to test for CT value
        ⍝ far intervals are chosen for non overlap 
        ⍝ with region of tolerant equality
        ⎕FR←fr_decf
        fl←{⍵,-⍵}i3+0.01                              ⍝ 1287: 128 bits Decimal
        Hfl←{⍵,-⍵}2E29+(1E16×⍳10)
        ⎕FR←fr_dbl

        testDesc←{'for ',case,{0∊⍴case2:'',⍵⋄' , ', case2,⍵},' & ⎕CT ⎕DCT:',⎕CT,⎕DCT, '& ⎕FR:', ⎕FR}

        r case case2←⍬ ⍬ ⍬

        :For fr :In 2 1
            ⎕FR←fr⊃fr_dbl fr_decf

            case←'independant'
            desc←testDesc⍬
            r,←'TI1' desc Assert (0)≡0-0
            r,←'TNull1' desc Assert ⍬≡''-0
            r,←'TNull2' desc Assert ⍬≡⍬-0
            r,←'TNull3' desc Assert ⍬≡0-''
            r,←'TNull4' desc Assert ⍬≡0-⍬
            r,←'TNull5' desc Assert ⍬≡''-⍬
            r,←'TNull6' desc Assert ⍬≡⍬-''
            :For case :In 'bool' 'i1' 'i2' 'i3' 'dbl' 'fl' 'cmplx' 'Hdbl' 'Sdbl' 'Hfl' 'Hcmplx'
                data←⍎case
                desc←testDesc⍬


                r,← 'T1' desc RunVariations (0⍨¨data) data data ⍝ substraction with the same number gives 0
                d1←data[?≢data]
                d2←data[?≢(data~d1)]
                r,← 'T2' desc RunVariations (d1 model d2) d1 d2 ⍝ model func finds results on single element
                r,← 'T3' desc RunVariations data data 0         ⍝ Identity
                r,← 'T4' desc RunVariations (-data) 0 data      ⍝ Identity
                r,← 'T5' desc RunVariations d1 d1 0             ⍝ Identity
                r,← 'T6' desc RunVariations (-d1) 0 d1          ⍝ Identity
                r,← 'T7' desc RunVariations (d1 d1) d1 (0 0)    ⍝ Identity (also hits arith_su.c#432 l_lsub_l)
                r,← 'T8' desc Assert ((|d1){(-⍵-⍺)≡⍺-⍵}|d2)     ⍝ Anti-commutative 

                ⍝ General tests to test the basic rules of subtract
                r,← 'TGen1' desc Assert (≢data)≡≢data-data ⍝ length of the array will not change
                ⍝ r,← 'TGen2' desc Assert (d1{(1287≡⎕dr ⍺-⍵)∨((⎕dr ⍺) ⌈ ⎕dr ⍵)≥⎕dr ⍺-⍵}d2) ⍝ datatype will always be greater than or equal to the original datatype
                r,← 'TGen3' desc Assert (11≡⎕dr data-data) ⍝ should always be an array of 0s

                ⍝ Cross type tests
                :For case2 :In 'i1' 'i2' 'i3' 'dbl' 'fl' 'cmplx' 'Hdbl' 'Hfl' 'Hcmplx'
                    :If (case≡case2)
                        :Continue
                    :EndIf
                    data2←⍎case2
                    data data2←data stripToSameLen data2
                    desc←testDesc⍬

                    ⍝ data type test
                    ⍝ r,← 'TGen4' desc Assert (d1{(1287≡⎕dr ⍺-⍵)∨((⎕dr ⍺) ⌈ ⎕dr ⍵)≥⎕dr ⍺-⍵}d2)

                    r,← 'TCross1' desc RunVariations (data model data2) data data2 ⍝ check result of different datatypes using model
                    r,← 'TCross2' desc RunVariations (data2 model data) data2 data ⍝ reverse of TCross1
                    r,← 'TCross3' desc RunVariations ((data2,data) model (data,data2)) (data2,data) (data,data2) ⍝ concat 2 different types
                    r,← 'TCross4' desc Assert (((data2 data) model (data data2))≡(data2 data)-(data data2)) ⍝ merge two different arrays creating a pointer array

                    d1←data[?≢data]
                    d2←data2[?≢(data2~d1)]
                    r,← 'TCross5' desc RunVariations (d1 model d2) d1 d2 ⍝ model finds results on single element
                :EndFor
                case2←⍬ ⍝ dispose case2
                desc←testDesc⍬

                ⍝ tests for known errors
                :For case3 :In 'char1' 'char2' 'char3' 'char0' 'charptr'
                    :If (isDyalogClassic) ∧ (case≢'char0') ∧ (case≢'ptr') 
                        :Continue ⍝ Skip tests for unicode character sets in DyalogAPL classic
                    :EndIf
                    data3←⍎case3
                    desc←testDesc⍬
                    c1←data3[?≢data3]
                    c2←(data3~c1)[?¯1+≢data3]

                    f←0 ⍝ flag
                    :Trap 11 ⍝ 11: Domain error
                        c1-c2 ⍝ N/A type + N/A type
                    :Else
                        f←1
                        r,← 'TDomainE2' desc Assert (f ∧ ⎕dmx.Message≡'') ⍝ check for error and dmx message
                    :EndTrap
                    
                    f←0 ⍝ flag
                    :Trap 11 ⍝ 11: Domain error
                        d1-c2 ⍝ Number type + N/A type
                    :Else
                        f←1
                        r,← 'TDomainE3' desc Assert (f ∧ ⎕dmx.Message≡'') ⍝ check for error and dmx message
                    :EndTrap
                    
                    f←0 ⍝ flag
                    :Trap 11 ⍝ 11: Domain error
                        c1-d1 ⍝ N/A type + number type
                    :Else
                        f←1
                        r,← 'TDomainE4' desc Assert (f ∧ ⎕dmx.Message≡'') ⍝ check for error and dmx message
                    :EndTrap
                :EndFor
            :EndFor
        :EndFor
    ∇
:EndNamespace