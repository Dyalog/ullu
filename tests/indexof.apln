⍝ This Namespace includes tests for the function Index of which is represented by Dyadic Iota(⍳)
⍝
⍝ Index Of (R←X⍳Y)
⍝ Elements of X and Y are considered the same if X≡Y returns 1 for those elements.
:Namespace indexof
    Assert←#.unittest.Assert
    isDyalogClassic←#.utils.isClassic

    model←{(⎕IO+1+≢⍺)-+/∨\1,⍨⍵∘.≡⍺}

    ⍝ Run Variations of each test with normal, empty and multiple shaped data
    ∇ tRes←tData RunVariations exp ;actualR;actualRE;expectedR;left;right;res;tID;tCmt;lshape;larg;rarg;rindex;r;x;n;expectedRM;actualRM
        (expectedR left right)←exp
        (tID tCmt)←tData
        tRes←⍬

        ⍝ normal
        actualR←left⍳right
        tRes,←tData Assert expectedR≡actualR

        ⍝ empty left
        actualRE←(0⍴left)⍳right ⍝ 0 in the shape means we have no elements in the array, i.e. it's empty.
        tRes,←('Empty',tID) tCmt Assert ((⎕IO⍨¨expectedR))≡actualRE

        ⍝ different shapes
        lshape←(~⎕IO)+?4/3
        larg←lshape⍴left
        rindex←(⊂(?n)?n←≢larg)
        rarg←rindex⌷larg
        actualRM←larg⍳rarg
        :If left≡⍬ ⍝ All cells will be identical
            expectedRM←(≢⊃rindex)⍴⎕IO
        :ElseIf 11≡⎕DR left
            expectedRM←((⊂⍤¯1) larg) model ((⊂⍤¯1) rarg) ⍝ use (slow, hungry) model
        :Else
            expectedRM←⊃rindex
        :EndIf
        tRes,←('Shape',tID) tCmt Assert expectedRM ≡ actualRM
    ∇

    ∇ r←test_indexof ;⎕CT;⎕DCT;ct;⎕FR;fr;⎕IO;io;ct_default;dct_default;fr_dbl;fr_decf;io_default;io_0;bool;i1;char0;char1;char2;i2;char3;i3;ptr;dbl;Hdbl;fl;Hfl;cmplx;Hcmplx;case;case2;data;d;data2;pos;testDesc;desc
        ct_default←1E¯14
        dct_default←1E¯28
        fr_dbl←645
        fr_decf←1287
        io_default←1
        io_0←0

        bool←0 1                                      ⍝ 11: 1 bit Boolean type arrays
        i1←{⍵,-⍵}⍳60                                  ⍝ 83: 8 bits signed integer
        i2←{⍵,-⍵}10000+⍳100                           ⍝ 163: 16 bits signed integer
        i3←{⍵,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        char0←⎕AV                                     ⍝ DyalogAPL classic char set
        :If ~isDyalogClassic
            char1←⎕UCS ⍳255                               ⍝ 80: 8 bits character
            char2←⎕UCS (1000+⍳100)                        ⍝ 160: 16 bits character
            char3←⎕UCS (100000+⍳100)                      ⍝ 320: 32 bits character
        :EndIf
        ptr←2,/⎕A                                     ⍝ 326: Pointer (32-bit or 64-bit as appropriate)
        dbl←{⍵,-⍵}1000.5+⍳100                         ⍝ 645: 64 bits Floating
        cmplx←{⍵,-⍵}(0J1×⍳100)+⌽⍳100                  ⍝ 1289: 128 bits Complex
        ⍝ Hdbl is 645 but larger numbers to test for CT value
        ⍝ intervals of 2 are chosen because CT for these numbers +1 and -1
        ⍝ come under the region of tolerant equality
        Hdbl←{⍵,-⍵}1E15+(1E10×⍳50)
        ⍝ Hfl is 1287 but larger numbers to test for CT value
        ⍝ far intervals are chosen for non overlap 
        ⍝ with region of tolerant equality
        ⎕FR←fr_decf
        fl←{⍵,-⍵}i3+0.01                              ⍝ 1287: 128 bits Decimal
        Hfl←{⍵,-⍵}2E29+(1E16×⍳10)
        ⎕FR←fr_dbl
        Hcmplx←{⍵,-⍵}(1E14J1E14×⍳20)                  ⍝ 1289 but larger numbers to test for CT value

        r←⍬
        testDesc←{'for ',case,{0∊⍴case2:'',⍵⋄' , ', case2,⍵},' & ⎕CT ⎕DCT:',⎕CT,⎕DCT, '& ⎕FR:', ⎕FR, '& ⎕IO:', ⎕IO}

        :For io :In io_default io_0
            ⎕IO←io

            :For ct :In 1 0 
                (⎕CT ⎕DCT)←ct × ct_default dct_default ⍝ set comparison tolerance

                :For fr :In fr_dbl fr_decf
                    ⎕FR←fr

                    case←'zilde'⋄case2←⍬
                    desc←testDesc⍬
                    r,← 'T0' desc RunVariations ⍬ ⍬ ⍬

                    :For case :In 'i1' 'i2' 'i3' 'char0' 'char1' 'char2' 'char3' 'ptr' 'dbl' 'fl' 'cmplx' 'Hdbl' 'Hfl' 'Hcmplx'
                        :If (isDyalogClassic) ∧ ((case≡'char1') ∨ (case≡'char2') ∨ (case≡'char3'))
                            :Continue ⍝ Skip tests for unicode character sets in DyalogAPL classic
                        :EndIf
                        data←⍎case
                        desc←testDesc⍬
                        :If ⎕FR=fr_decf ∧ 1289=⎕DR data ⍝ ⎕FR=1287 is not recommended to be used with cmplx
                            :Continue
                        :EndIf

                        ⍝ Cross type tests
                        :For case2 :In 'i1' 'i2' 'i3' 'char1' 'char2' 'char3' 'ptr' 'dbl' 'fl' 'cmplx' 'Hdbl' 'Hfl' 'Hcmplx'
                            :If (case≡'char0') ∨ (isDyalogClassic) ∧ ((case2≡'char1') ∨ (case2≡'char2') ∨ (case2≡'char3'))
                                :Continue ⍝ char0 has overlapping elements with char1 and Skip tests for unicode character sets in DyalogAPL classic
                            :EndIf
                            data2←⍎case2
                            desc←testDesc⍬
                            :If (case≡case2)
                                r,←'TCross0' desc RunVariations (⍳≢data) data data2
                                :Continue
                            :EndIf
                            r,← 'TCross1' desc RunVariations ((⎕IO+⊃⍴data)⍨¨data2) data data2                   ⍝ no match, all return not found
                            r,← 'TCross2' desc RunVariations ((⎕IO+⊃⍴data2)⍨¨data) data2 data                   ⍝ no match, all return not found
                            r,← 'TCross3' desc RunVariations (⍳≢data) (data,data2) data                         ⍝ data match, returns index for data
                            r,← 'TCross4' desc RunVariations ((⍳≢data),((⎕IO+⊃⍴data)⍨¨data2)) data (data,data2) ⍝ data match, data2 no match, returns index and not found
                        :EndFor
                        case2←⍬ ⍝ dispose case2
                        desc←testDesc⍬

                        r,← 'T1' desc RunVariations (⍳≢data) data data      ⍝ all elements of data are indexed
                        r,← 'T2' desc RunVariations (⎕IO+⊃⍴data) data 1E50  ⍝ random huge element is not found
                        d←data[pos←?≢data]                                  ⍝ element from random position is chosen
                        r,← 'T3' desc RunVariations pos data d              ⍝ element from random position exists

                        d←data[pos←?≢data]
                        :If ct ⍝ tolerant
                            ⍝ case for CT default & is skipped for FR=1287
                            :If (⊂data)∊Hdbl Hfl Hcmplx
                                ⍝ Hdbl=Hdbl+1 with default CT, but not for DECF
                                r,← 'CTDefault' desc Assert ((pos≡(data⍳(d+1))) ∨ (fr=fr_decf ∧ case≡'Hdbl'))
                            :EndIf
                        :Else  ⍝ exact
                            :If ~(⎕DR data) ∊ 80 82 160 320 326 ⍝ non-numeric are skipped
                                ⍝ d≠d+1 for all numeric types, except when Hfl represented as DOUB
                                r,← 'CTZero' desc Assert ((pos≢(data⍳(d+1))) ∨ (fr=fr_dbl ∧ case≡'Hfl'))
                            :EndIf
                        :EndIf
                    :EndFor

                    ⍝ Booleans need special tests
                    case←'bool'
                    desc←testDesc⍬

                    r,← 'TB1' desc RunVariations (⎕IO) bool 0
                    r,← 'TB2' desc RunVariations (⎕IO+1) bool 1
                    r,← 'TB3' desc RunVariations (⍳2) bool bool

                    ⍝ Boolean cross type tests
                    :For case2 :In 'i1' 'i2' 'i3' 'char0' 'char1' 'char2' 'char3' 'ptr' 'dbl' 'fl' 'cmplx'  'Hdbl' 'Hfl' 'Hcmplx'
                        :If (isDyalogClassic) ∧ ((case2≡'char1') ∨ (case2≡'char2') ∨ (case2≡'char3'))
                            :Continue ⍝ Skip tests for unicode character sets in DyalogAPL classic
                        :EndIf
                        data2←⍎case2
                        desc←testDesc⍬
                        :If (case2≢'i1') ⍝ bool requires separate cross tests because of overlap with i1
                            r,← 'TCrossBool1' desc RunVariations ((⎕IO+⊃⍴bool)⍨¨data2) bool data2      ⍝ All elements return not found
                            r,← 'TCrossBool2' desc RunVariations ((⎕IO+⊃⍴data2)⍨¨bool) data2 bool      ⍝ All elements return not found
                        :Else
                            r,← 'TCrossBooli1' desc RunVariations (((⎕IO+1)@⎕IO)((⎕IO+⊃⍴bool)⍨¨data2)) bool data2 ⍝ All elements return are not found except 1
                            r,← 'TCrossBooli1' desc RunVariations ((⎕IO+⊃⍴data2),⎕IO) data2 bool       ⍝ 0 not found, 1 found
                        :EndIf
                    :EndFor
                    case2←⍬
                :EndFor
            :EndFor
        :EndFor
    ∇
:EndNamespace
