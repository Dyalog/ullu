:Namespace floor
    Assert←#.unittest.Assert

    ⍝ Run Variations of each test with normal, empty and multiple shaped data
    ∇ tRes←tData RunVariations exp ;actualR;actualRE;expectedR;left;right;res;tID;tCmt;p;shape;shapeW0;actualRS
        (expectedR p)←exp
        (tID tCmt)←tData
        tRes←⍬

        ⍝ normal
        actualR←⌊p
        tRes,←tData Assert expectedR≡actualR
    ∇

    ∇ r←test_floor ;r;data;case;data2;case2;type;bool;i1;i2;i3;dbl;fl;cmplx;Hdbl;Hfl;Hcmplx;d1;d2;almostd1;fltalmostd1;ct;fr;⎕CT;⎕DCT;⎕FR;ct_default;dct_default;fr_dbl;fr_decf;testDesc;desc
        ct_default←1E¯14
        dct_default←1E¯28
        fr_dbl←645
        fr_decf←1287

        bool←0 1                                        ⍝ 11: 1 bit Boolean type arrays
        i1←{⍵,0,-⍵}⍳120                                 ⍝ 83: 8 bits signed integer
        i2←{⍵,0,-⍵}10000+⍳1000                          ⍝ 163: 16 bits signed integer
        i3←{⍵,0,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        dbl←{⍵,0,-⍵}1000.5+⍳100                         ⍝ 645: 64 bits Floating
        ⍝ Hdbl is 645 but larger numbers
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)
        ⍝ Hfl is 1287 but larger numbers
        ⎕FR←fr_decf                                     ⍝ use ⎕FR=1287
        fl←{⍵,0,-⍵}1000.5+⍳100                          ⍝ 1287: 128 bits Decimal
        Hfl←{⍵,-⍵}2E29+(1E16×⍳10)                       ⍝ 1287 but larger numbers
        ⎕FR←fr_dbl                                      ⍝ revert ⎕FR=645
        cmplx←{(-⍵),⍵,0,(+⍵),(-+⍵)}(0J1×⍳100)+⌽⍳100     ⍝ 1289: 128 bits Complex
        Hcmplx←{(-⍵),⍵,(+⍵),(-+⍵)}(1E14J1E14×⍳20)       ⍝ 1289 but larger numbers

        r←⍬
        testDesc←{'for ',case,{0∊⍴case2:'',⍵⋄' , ', case2,⍵},' & ⎕CT ⎕DCT:',⎕CT,⎕DCT, '& ⎕FR:', ⎕FR}

        ⍝ Using strings to calculate floor of a number
        ⍝ Other approaches included using {⍵-(1|⍵)} but residue uses floor in its derivation so can be conflicting
        ⍝ Approach 2 was using binary conversion and stripping decimals similar to the string approach, but the sources use something similar
        ⍝ The string approach is good because it deals with floor in a very non-co-related way so it can never be clashing
        genFloor←{
            dotPos←{⍸,'.'⍷(⍕⍵)}⍵    ⍝ convert num to string and get position of the decimal point
            int←⍎(⍕⍵)↑⍨¯1+dotPos    ⍝ strip integer based on the decimal point
            int-(⍵<0)∧(~0∊⍴dotPos)  ⍝ Subtract 1 only when negative+non int component exists. eg: ¯123.32→¯124
        }
        ⍝ genFloor←{(⍎(⍕⍵)↑⍨¯1+⍸,'.'⍷(⍕⍵))-(⍵<0)∧(~0∊⍴(⍸,'.'⍷(⍕⍵)))}

        :For ct :In 0 1
            (⎕CT ⎕DCT)←ct × ct_default dct_default ⍝ set comparision tolerance
            :For fr :In 2 1
                ⎕FR←fr⊃fr_dbl fr_decf
                :For case :In 'i1' 'i2' 'i3' 'dbl' 'fl' 'Hdbl'  'Hfl' ⍝'cmplx' 'Hcmplx' 
                    data←⍎case
                    ⍝ Cross type tests
                    :For case2 :In 'i1' 'i2' 'i3' 'dbl' 'fl'
                        data2←⍎case2
                        :If (⊂data)∊cmplx Hdbl Hfl Hcmplx
                            :Continue
                        :EndIf
                        desc←testDesc⍬
                        :If (data≡data2)
                            :Continue
                        :EndIf
                        r,← 'TCross1' desc RunVariations (genFloor¨ data,data2) (data,data2)
                    :EndFor

                    case2←⍬ ⍝ disposing case2 for testDesc
                    desc←testDesc⍬

                    r,← 'T1' desc RunVariations (genFloor¨data) data                    ⍝ generator func finds results on array
                    d1←data[?≢data]
                    r,← 'T2' desc RunVariations (genFloor d1) d1                        ⍝ generator func finds results on single element

                    :If (⊂data)∊i1 i2 i3
                        r,← 'TInt' desc RunVariations data data                         ⍝ floor of integers will always be floor
                    :EndIf

                    :If case≡'dbl'
                        halfLen←(¯1+≢data)÷2
                        r,← 'TDbl' desc RunVariations ({(⍵-0.5),0,-0.5+⍵}(halfLen↑data)) data    ⍝ floor of dbl is removing the 0.5 from the number
                    :EndIf
                :EndFor
            :EndFor
        :EndFor
    ∇
    
:EndNamespace