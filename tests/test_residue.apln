⍝ This Namespace includes tests for the function Residue which is represented by Dyadic stile(|)
⍝
⍝ Residue (R←X|Y)
⍝ Residue is a dyadic scalar function which gives the remainder of division between two real numbers. It takes the divisor as the left argument, and the dividend as the right argument.
:Namespace test_residue
    Assert←#.unittest.Assert

    ⍝ Run Variations of each test with normal, empty and multiple shaped data
    ∇ tRes←tData RunVariations exp ;actualR;actualRE;expectedR;larg;rarg;res;tID;tCmt;shape;actualRS;shapeW0;actualRSW0
        (expectedR larg rarg)←exp
        (tID tCmt)←tData
        tRes←⍬

        ⍝ normal
        actualR←larg|rarg
        tRes,←tData Assert expectedR≡actualR
        
        ⍝ empty
        actualRE←(0⍴larg)|(0⍴rarg) ⍝ 0 in the shape means we have no elements in the array, i.e. it's empty.
        tRes,←('EmptyL',tID) tCmt Assert ⍬≡actualRE ⍝ empty array is expectedR
    
        ⍝ different shapes
        shape←?(?4)/4
        actualRS←(shape⍴larg)|(shape⍴rarg)
        tRes,←('Multiple',tID) tCmt Assert (shape⍴expectedR)≡actualRS

        ⍝ different shapes with 0 in shape
        shapeW0←(0@(?(≢shape)))shape
        actualRSW0←(shapeW0⍴larg)|(shapeW0⍴rarg)
        tRes,←('ShapeW0',tID) tCmt Assert (shapeW0⍴0) ≡ actualRSW0
    ∇

    ∇ r←Test_Residue ;genResidue;r;data;case;data2;case2;type;bool;i1;char1;char2;i2;char3;i3;ptr;dbl;fl;cmplx;Hdbl;Hfl;Hcmplx;d1;d2;ct;fr;⎕CT;⎕DCT;⎕FR;ct_default;dct_default;fr_dbl;fr_decf;testDesc;desc
        ct_default←1E¯14
        dct_default←1E¯28
        fr_dbl←645
        fr_decf←1287

        bool←0 1                                      ⍝ 11: 1 bit Boolean type arrays
        i1←{⍵,0,-⍵}⍳120                                 ⍝ 83: 8 bits signed integer
        i2←{⍵,0,-⍵}10000+⍳1000                          ⍝ 163: 16 bits signed integer
        i3←{⍵,0,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        dbl←{⍵,0,-⍵}1000.5+⍳100                         ⍝ 645: 64 bits Floating
        ⍝ Hdbl is 645 but higher order
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)
        ⍝ Hfl is 1287 but higher order
        ⎕FR←fr_decf                                   ⍝ use ⎕FR=1287
        fl←{⍵,0,-⍵}1000.5+⍳100                          ⍝ 1287: 128 bits Decimal
        Hfl←{⍵,-⍵}2E29+(1E16×⍳10)
        ⎕FR←fr_dbl                                    ⍝ revert ⎕FR=645
        cmplx←{(-⍵),⍵,0,(+⍵),(-+⍵)}(0J1×⍳100)+⌽⍳100     ⍝ 1289: 128 bits Complex
        Hcmplx←{(-⍵),⍵,(+⍵),(-+⍵)}(1E14J1E14×⍳20)     ⍝ 1289 but higher order

        r←⍬
        testDesc←{'for ',case,{0∊⍴case2:'',⍵⋄' , ', case2,⍵},' & ⎕CT ⎕DCT:',⎕CT,⎕DCT, '& ⎕FR:', ⎕FR}

        genResidue←{⍵-⍺×⌊⍵÷⍺+⍺=0}
        
        case←⍬
        case2←⍬

        :For ct :In 0 1
            (⎕CT ⎕DCT)←ct × ct_default dct_default ⍝ set comparision tolerance
            :For fr :In 2 1
                ⎕FR←fr⊃fr_dbl fr_decf
                
                ⍝ Tests added to achieve complete code coverage
                case←'independant'
                case2←⍬
                desc←testDesc⍬
                r,← 'Ti1' desc RunVariations (0 genResidue 11) 0 11        ⍝ Special optimization for scalar 0 from iresidue at apl/allos/src/scalarscalar.cpp#L518
                r,← 'Ti2' desc RunVariations (¯1 genResidue 11) ¯1 11      ⍝ Special optimization for scalar ¯1 from iresidue at apl/allos/src/scalarscalar.cpp#L518
                r,← 'Ti3' desc Assert (2/(2 genResidue 1J1))≡(2|2/1J1)     ⍝ Special optimization for scans from code around apl/allos/src/arith_su.c#L1241
                r,← 'Ti4' desc Assert (2/0)≡(2|2/1E40)                     ⍝ Special optimization for scans from code around apl/allos/src/arith_su.c#L1241

                :For case :In 'i1' 'i2' 'i3' 'dbl' 'Hdbl' 'fl' 'Hfl' 'cmplx' 'Hcmplx' 
                    data←⍎case
                    ⍝ Cross type tests
                    :For case2 :In 'i1' 'i2' 'i3' 'dbl' 'fl'
                        data2←⍎case2
                        :If (⊂data)∊cmplx Hdbl Hfl Hcmplx
                            :Continue
                        :EndIf
                        desc←testDesc⍬
                        :If (data≡data2)
                            r,←'TCross0' desc RunVariations (0⍨¨data) data data2
                            :Continue
                        :EndIf
                        data2←(≢data)↑data2                                                             ⍝ strip data2 to be equal length to data
                        r,← 'TCross1' desc RunVariations (data genResidue data2) data data2
                        r,← 'TCross2' desc RunVariations (data2 genResidue data) data2 data
                    :EndFor

                    case2←⍬ ⍝ disposing case2 for testDesc
                    desc←testDesc⍬

                    r,← 'T1' desc RunVariations (data genResidue ⌽data) data (⌽data)                    ⍝ custom func finds results on array
                    d1←data[?≢data]
                    d2←data[?≢(data~d1)]
                    r,← 'T2' desc RunVariations (d1 genResidue d2) d1 d2                                ⍝ custom func finds results on single element
                    r,← 'T3' desc RunVariations ((0,1↓data) genResidue data) (0,1↓data) (data) 

                    :If (⎕DR data)∊83 163 323
                        halfLen←(¯1+≢data)÷2
                        r,← 'TSeq1' desc RunVariations ({⍵,(⌽⍵),0}halfLen⍴1 2 3 0) 4 data               ⍝ Sequences to test functionality of residue
                        r,← 'TSeq2' desc RunVariations ({⍵,(⌽⍵),0}halfLen⍴(⍳9), 0) 10 data              ⍝ Sequences to test functionality of residue
                    :EndIf

                    :If case≡'dbl'
                        halfLen←(¯1+≢data)÷2
                        r,← 'TSeqDbl1' desc RunVariations ({⍵,0,(2↓⌽⍵),0.5,3.5}halfLen⍴(1.5 2.5 3.5 0.5)) 4 data    ⍝ Sequences to test functionality of residue
                        r,← 'TSeqDbl2' desc RunVariations ({⍵,0,(2↓⌽⍵),0.5,9.5}halfLen⍴(0.5+⍳9), 0.5) 10 data       ⍝ Sequences to test functionality of residue
                    :EndIf

                    almostd1←d1×+/10⍴0.1 ⍝ Almost, but not exactly d1
                    ⍝ tests with comparision tolerance
                    :If ct ⍝ tolerant
                        :If (⊂data)∊Hdbl Hfl Hcmplx
                            ⍝ Hdbl=Hdbl+1 with default CT, but not for DECF (similar for Hcmplx)
                            r,← 'CTDefault' desc Assert ((0≡(d1|d1+1)) ∨ (fr=2 ∧ (case≡'Hdbl') ∨ (case≡'Hcmplx')))
                        :Else
                            r,← 'CTDefaultAlmost1' desc Assert 0≡d1|almostd1
                            r,← 'CTDefaultAlmost2' desc Assert 0≡almostd1|d1
                        :EndIf
                    :Else  ⍝ exact
                        :If ~(⎕DR data) ∊ 80 160 320 326 ⍝ non-numeric are skipped
                            d1←{d1=¯1:data[?≢data]⋄d1}d1
                            ⍝ d≠d+1 for all numeric types, except when Hfl represented as DOUB
                            r,← 'CTZero' desc Assert ((0≢(d1|d1+1)) ∨ (fr=1 ∧ case≡'Hfl'))
                            r,← 'CTZeroAlmost1' desc Assert (0≡⌊|almostd1|d1) ∨ (fr=2) ∨ (fr=1 ∧ case≡'Hfl')
                            r,← 'CTZeroAlmost2' desc Assert ((⌈|d1)≡⌈|d1|almostd1) ∨ (fr=2) ∨ (fr=1 ∧ case≡'Hfl')
                        :EndIf
                    :EndIf
                :EndFor
            :EndFor
        :EndFor
    ∇

:EndNamespace
