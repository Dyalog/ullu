⍝ This Namespace includes tests for the function Residue which is represented by Dyadic stile(|)
⍝
⍝ Residue (R←X|Y)
⍝ Residue is a dyadic scalar function which gives the remainder of division between two real numbers. It takes the divisor as the left argument, and the dividend as the right argument.
:Namespace test_residue
    Assert←#.unittest.Assert

    ⍝ Run Variations of each test with normal, empty and multiple shaped data
    ∇ tRes←tData RunVariations exp ;actualR;actualRE;expectedR;larg;rarg;res;tID;tCmt;lshape;lshapeW0;rshape;x;actualRM
        (expectedR larg rarg)←exp
        (tID tCmt)←tData
        tRes←⍬

        ⍝ normal
        actualR←larg|rarg
        tRes,←tData Assert expectedR≡actualR
    ∇

    ⍝ Read more about DR: https://help.dyalog.com/latest/#Language/System%20Functions/Data%20Representation%20Monadic.htm
    ⍝ Read more about CT and DCT: https://help.dyalog.com/latest/#Language/System%20Functions/ct.htm
    ∇ r←Test_Membership ;w;n;r;data;case;data2;case2;type;bool;i1;char1;char2;i2;char3;i3;ptr;dbl;fl;cmplx;Hdbl;Hfl;Hcmplx;d;ct;fr;⎕CT;⎕DCT;⎕FR;ct_default;dct_default;fr_dbl;fr_decf;testDesc;desc
        ct_default←1E¯14
        dct_default←1E¯28
        fr_dbl←645
        fr_decf←1287

        bool←0 1                                      ⍝ 11: 1 bit Boolean type arrays
        i1←{⍵,-⍵}⍳120                                 ⍝ 83: 8 bits signed integer
        i2←{⍵,-⍵}10000+⍳1000                          ⍝ 163: 16 bits signed integer
        i3←{⍵,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        dbl←{⍵,-⍵}1000.5+⍳100                         ⍝ 645: 64 bits Floating
        ⍝ Hdbl and Sdbl is 645 but higher order and lower order
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)
        Sdbl←{⍵,-⍵}(⍳10)×1E¯40
        ⍝ Hfl and Sfl is 1287 but higher order and lower order
        ⎕FR←fr_decf                                   ⍝ use ⎕FR=1287
        fl←{⍵,-⍵}1000.5+⍳100                          ⍝ 1287: 128 bits Decimal
        Hfl←{⍵,-⍵}2E29+(1E16×⍳10)
        Sfl←{⍵,-⍵}(⍳10)×1E¯40
        ⎕FR←fr_dbl                                    ⍝ revert ⎕FR=645

        r←⍬
        testDesc←{'for ',case,{0∊⍴case2:'',⍵⋄' , ', case2,⍵},' & ⎕CT ⎕DCT:',⎕CT,⎕DCT, '& ⎕FR:', ⎕FR}

        genResidue←{⍵-⍺×⌊⍵÷⍺+0=⍺}
        
        case←⍬
        case2←⍬

        :For ct :In 1 0 
            (⎕CT ⎕DCT)←ct × ct_default dct_default ⍝ set comparision tolerance
            :For fr :In 2 1
                ⎕FR←fr⊃fr_dbl fr_decf

                :For case :In 'i1' 'i2' 'i3' 'dbl' 'Hdbl' 'Sdbl' 'fl' 'Hfl' 'Sfl'
                    data←⍎case
                    :If ⎕FR=fr_decf ∧ 1289=⎕DR data ⍝ ⎕FR=1287 is not recommended to be used with cmplx
                        :Continue
                    :EndIf
                    ⍝ Cross type tests
                    :For case2 :In 'i1' 'i2' 'i3' 'dbl' 'Hdbl' 'Sdbl' 'fl' 'Hfl' 'Sfl'
                        data2←⍎case2
                        desc←testDesc⍬
                        :If (data≡data2)
                            r,←'TCross0' desc RunVariations (0⍨¨data) data data2
                            :Continue
                        :EndIf
                        ⍝ r,← 'TCross1' desc RunVariations (data genResidue data2) data data2                    ⍝ no match, all return 0
                        ⍝ r,← 'TCross2' desc RunVariations (data2 genResidue data) data2 data                    ⍝ no match, all return 0
                    :EndFor

                    case2←⍬ ⍝ disposing case2 for testDesc
                    desc←testDesc⍬

                    r,←'T1' desc RunVariations (data genResidue ⌽data) data (⌽data) ⍝ custom func finds results on array
                    ⍝ r,←'T2' desc RunVariations (0⍨¨data) data data ⍝ all are perfectly divisible
                    d1←data[?≢data]
                    d2←data[?≢data]
                    r,←'T3' desc RunVariations (d1 genResidue d2) d1 d2 ⍝ custom func finds results on single element
                :EndFor
            :EndFor
        :EndFor
        case←⍬
        case2←⍬
        desc←testDesc⍬
        r,← 'TB1' desc RunVariations (5 genResidue 11) 5 11
    ∇

:EndNamespace
