:Namespace unique
    Assert←#.unittest.Assert

    genUnique←{⊃∪⍨/⌽⍵}⍝{⌽1/↑↑⌽∪/⌽⊂∘⊂⍤¯1⊢⍵}

    ∇ tRes←tData RunVariations exp ;actualR;actualRE;expectedR;larg;rarg;res;tID;tCmt;shape;actualRS;shapeW0;actualRSW0
        (expectedR rarg)←exp
        (tID tCmt)←tData
        tRes←⍬

        ⍝ normal
        actualR←∪rarg
        tRes,←tData Assert expectedR≡actualR

        ⍝ scalar
        rand←(?≢rarg)-1
        trimmedrarg←rand↓rarg ⍝ so that not always the first is selected
        shape←⍬               ⍝ scalar shape
        actualRS←∪shape⍴trimmedrarg
        tRes,←('Scalar',tID) tCmt Assert (∪(1+rand)⊃rarg)≡actualRS

        ⍝ ⍝ empty
        actualRE←∪0⍴rarg ⍝ 0 in the shape means we have no elements in the array, i.e. it's empty.
        expectedRE←{(⎕DR ⍵)∊80 160 320 326:''⋄⍬}expectedR
        tRes,←('Empty',tID) tCmt Assert expectedRE≡actualRE ⍝ empty array is expectedR

        ⍝ ⍝ different shapes
        shape←?(?4)/4
        ⍝ actualRS←∪(shape⍴rarg)
        ⍝ tRes,←('Multiple',tID) tCmt Assert (shape⍴expectedR)≡actualRS

        ⍝ ⍝ different shapes with 0 in shape
        ⍝ shapeW0←(0@(?(≢shape)))shape
        ⍝ actualRSW0←∪(shapeW0⍴rarg)
        ⍝ tRes,←('ShapeW0',tID) tCmt Assert (shapeW0⍴0) ≡ actualRSW0
    ∇

    ∇ r←test_unique
        ct_default←1E¯14
        dct_default←1E¯28
        fr_dbl←645
        fr_decf←1287

        bool←0 1                                      ⍝ 11: 1 bit Boolean type arrays
        i1←¯60+⍳120                                   ⍝ 83: 8 bits signed integer
        char1←⎕UCS ⍳255                               ⍝ 80: 8 bits character
        char2←⎕UCS (1000+⍳100)                        ⍝ 160: 16 bits character
        i2←{⍵,-⍵}10000+⍳100                           ⍝ 163: 16 bits signed integer
        char3←⎕UCS (100000+⍳100)                      ⍝ 320: 32 bits character
        i3←{⍵,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        ptr←⎕A                                     ⍝ 326: Pointer (32-bit or 64-bit as appropriate)
        dbl←{⍵,-⍵}i3+0.1                              ⍝ 645: 64 bits Floating
        cmplx←{⍵,-⍵}(0J1×⍳100)+⌽⍳100                  ⍝ 1289: 128 bits Complex
        Hcmplx←{⍵,-⍵}(1E14J1E14×⍳20)                  ⍝ 1289 but larger numbers to test for CT value
        ⍝ Hdbl is 645 but larger numbers to test for CT value
        ⍝ intervals of 2 are chosen because CT for these numbers +1 and -1
        ⍝ come under the region of tolerant equality
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)
        ⍝ Hfl is 1287 but larger numbers to test for CT value
        ⍝ far intervals are chosen for non overlap 
        ⍝ with region of tolerant equality
        ⎕FR←fr_decf
        fl←{⍵,-⍵}i3+0.01                              ⍝ 1287: 128 bits Decimal
        Hfl←{⍵,-⍵}2E29+(1E16×⍳10)
        ⎕FR←fr_dbl

        r←⍬
        testDesc←{'for ',case,{0∊⍴case2:'',⍵⋄' , ', case2,⍵},' & ⎕CT ⎕DCT:',⎕CT,⎕DCT, '& ⎕FR:', ⎕FR}

        case←⍬
        case2←⍬
        desc←testDesc⍬

        :For ct :In 0 1
            (⎕CT ⎕DCT)←ct × ct_default dct_default ⍝ set comparision tolerance

            :For fr :In 2 1
                ⎕FR←fr⊃fr_dbl fr_decf
                desc←testDesc⍬
                r,← 'Tx1' desc RunVariations (22 10 21 5) (22 10 22 22 21 10 5 10)
                r,← 'Tx2' desc RunVariations (genUnique (22 10 22 22 21 10 5 10)) (22 10 22 22 21 10 5 10)

                :For case :In 'i1' 'i2' 'i3' 'char1' 'char2' 'char3' 'ptr' 'dbl' 'fl' 'cmplx' 'Hdbl' 'Hfl' 'Hcmplx'
                    data←⍎case
                    desc←testDesc⍬
                    r,← 'T1' desc RunVariations data data      ⍝ all elements of data are indexed
                    r,← 'T2' desc RunVariations data 2/data    ⍝ all elements of data are repeated sequentially

                :EndFor
            :EndFor
        :EndFor
    ∇

:EndNamespace
