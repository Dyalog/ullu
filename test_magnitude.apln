⍝ This Namespace includes tests for the function Magnitude which is represented by Monadic stile(|)
⍝
⍝ Magnitude:
⍝ Y may be any numeric array. R is numeric composed of the absolute (unsigned) values of Y.
⍝ Note that the magnitude of a complex number a+⍳b is defined to be √(a^2+b^2).
:Namespace test_magnitude
    Assert←#.unittest.Assert
    
    ⍝ evaluate each test with normal, empty and multiple shaped data
    ∇ tRes←tData RunVariations exp ;actualR;actualRE;expectedR;left;right;res;tID;tCmt;p;shape;shapeW0;actualRS
        (expectedR p)←exp
        (tID tCmt)←tData
        tRes←⍬

        ⍝ normal
        actualR←|p
        tRes,←tData Assert expectedR≡actualR

        ⍝ empty
        actualRE←(0⍴⊂p) ⍝ generating empty array
        tRes,←('Empty',tID) tCmt Assert (|(0⍴⊂p))≡actualRE

        ⍝ different shapes
        shape←?4/4
        actualRS←|shape⍴actualR
        tRes,←('Multiple',tID) tCmt Assert (shape⍴expectedR)≡actualRS

        ⍝ different shapes with 0 in shape
        shapeW0←(0@(?4))shape
        actualRS←|shapeW0⍴p
        tRes,←('ShapeW0',tID) tCmt Assert (shapeW0⍴0) ≡ actualRS
    ∇

    ∇ r←Test_Magnitude_General ;bool;i1;i2;i3;dbl;fl;Hdbl;Hfl;fr_dbl;fr_decf;magGen;case;data;d;testDesc;desc;fr;⎕FR;Sdbl;Sfl
        fr_dbl←645
        fr_decf←1287

        bool←0 1                                      ⍝ 11: 1 bit Boolean type arrays
        i1←{⍵,-⍵}⍳120                                 ⍝ 83: 8 bits signed integer
        i2←{⍵,-⍵}10000+⍳1000                          ⍝ 163: 16 bits signed integer
        i3←{⍵,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        dbl←{⍵,-⍵}1000.5+⍳100                         ⍝ 645: 64 bits Floating
        ⍝ Hdbl and Sdbl is 645 but higher order and lower order
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)
        Sdbl←{⍵,-⍵}(⍳10)×1E¯40
        ⍝ Hfl and Sfl is 1287 but higher order and lower order
        ⎕FR←fr_decf                                   ⍝ use ⎕FR=1287
        fl←{⍵,-⍵}1000.5+⍳100                          ⍝ 1287: 128 bits Decimal
        Hfl←{⍵,-⍵}2E29+(1E16×⍳10)
        Sfl←{⍵,-⍵}(⍳10)×1E¯40
        ⎕FR←fr_dbl                                    ⍝ revert ⎕FR=645

        r←⍬
        magGen←{⍵×(¯1@(∊∘0)(⍵>0))}
        testDesc←{'for ',case, '& ⎕FR:', ⎕FR}

        :For fr :In 1 2
            ⎕FR←fr⊃fr_dbl fr_decf
            :For case :In 'bool' 'i1' 'i2' 'i3' 'dbl' 'Hdbl' 'Sdbl' 'fl' 'Hfl' 'Sfl'
                data←⍎case
                desc←testDesc⍬
                :If case≢'bool'
                    r,←'T1' desc RunVariations ({(⊣,⊣)((≢⍵)÷2)↑⍵}data) data ⍝ all positive values are chosen
                    r,←'T2' desc RunVariations (magGen data) data
                    d←data[?≢data]
                    r,←'T3' desc RunVariations (magGen d) d ⍝ custom function does the same operation
                :Else
                    r,←'Tb1' desc RunVariations (0 1) bool
                    r,← 'Tb2' desc RunVariations 0 (⊃bool)
                :EndIf
            :EndFor
        :EndFor
    ∇

    ∇ r←Test_Magnitude_Cmplx ;cmplx;Hcmplx;magCmplx;d;case;data;testDesc;desc
        cmplx←{(-⍵),⍵,(+⍵),(-+⍵)}(0J1×⍳100)+⌽⍳100          ⍝ 1289: 128 bits Complex
        Hcmplx←{(-⍵),⍵,(+⍵),(-+⍵)}(1E13J1E13×⍳20)          ⍝ 1289 but higher order
        ⍝ Decimal values in cmplx numbers are not recommended to be used by the docs
        
        magCmplx←{0.5*⍨+.×⍨9 11○⍵}
        r←⍬
        testDesc←{'for ',case}
        
        ⍝ Todo: test for case with ⎕fr←1287 with expected results, even though it is not recommended for the user
        :For case :In 'cmplx' 'Hcmplx'
            data←⍎case
            desc←testDesc⍬
            r,←'Tc1' desc RunVariations (magCmplx¨data) data

            :For d :In data
                case←d
                desc←testDesc⍬
                r,←'Tc2' desc RunVariations (magCmplx d) d
            :EndFor
        :EndFor
    ∇
:EndNamespace