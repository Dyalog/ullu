:Namespace test_magnitude
    assert←#.unittest.Assert
    ∇ r←Test_Magnitude_General ;bool;i1;char1;char2;i2;char3;i3;ptr;dbl;fl;Hdbl;Hfl;getMagGen;d;data;type
        bool←0 1                                      ⍝ 11: 1 bit Boolean type arrays
        i1←{⍵,-⍵}+⍳120                                ⍝ 83: 8 bits signed integer
        char1←⎕UCS ⍳255                               ⍝ 80: 8 bits character
        char2←⎕UCS (1000+⍳100)                        ⍝ 160: 16 bits character
        i2←{⍵,-⍵}10000+⍳1000                          ⍝ 163: 16 bits signed integer
        char3←⎕UCS (100000+⍳100)                      ⍝ 320: 32 bits character
        i3←{⍵,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        ptr←2,/⎕A                                     ⍝ 326: Pointer (32-bit or 64-bit as appropriate)
        dbl←{⍵,-⍵}1000.5+⍳100                         ⍝ 645: 64 bits Floating
        ⎕FR←1287 ⋄ fl←{⍵,-⍵}1000.5+⍳100 ⋄ ⎕FR←645      ⍝ 1287: 128 bits Decimal
        cmplx←{⍵,-⍵}(0J1×⍳100)+⌽⍳100                  ⍝ 1289: 128 bits Complex
        ⍝ Hdbl is 645 but higher order to test for CT value
        ⍝ intervals of 2 are chosen because CT for these numbers +1 and -1
        ⍝ come under the region of tolerant equality
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)
        ⍝ Hfl is 1287 but higher order to test for CT value
        ⍝ far intervals are chosen for non overlap 
        ⍝ with region of tolerant equality
        ⎕FR←1287 ⋄ Hfl←{⍵,-⍵}2E29+(1E16×⍳10) ⋄ ⎕FR←645 

        r←⍬
        getMagGen←{⍵<0:-1×⍵⋄⍵}
        :For case :In 'bool' 'i1' 'i2' 'i3' 'dbl' 'fl' 'Hdbl' 'Hfl'
            data←⍎case
            :If 11≠type←⎕DR data
                r,←'t1' ('for'case) assert (({⍵,⍵}{((≢⍵)÷2)↑⍵}data)≡|data)
                d←data[?≢data]
                r,←'t2' ('for'case) assert ((getMagGen d)≡|d) 
            :Else
                r,←'tb1' ('for'case) assert (0 1≡|bool) 
                r,← 'tb2'  ('for'case) assert (0≡|⊃bool)
            :EndIf
        :EndFor
    ∇

    ∇ r←Test_Magnitude_Cmplx ;cmplx;getMagCmplx;c
        cmplx←{⍵,-⍵}(0J1×⍳10)+⌽⍳10            ⍝ 1289: 128 bits Complex
        Hcmplx←{⍵,-⍵}(1E14J1E14×⍳20)                  ⍝ 1289 but higher order to test for CT value
        getMagCmplx←{*∘0.5+/2*⍨(9 11○⊂⍵)}
        r←⍬
        :For c :In cmplx, Hcmplx
            r,←'tc1' ('for' c) assert ((getMagCmplx c)≡|c) 
        :EndFor
        r,←'tc2' 'for cmplx' assert ((getMagCmplx¨cmplx)≡|cmplx) 
    ∇
:EndNamespace