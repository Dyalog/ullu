:Namespace testfns
    Assert←#.unittest.Assert
    numOrChar←#.utils.numOrChar
    change0sto1←#.utils.change0sto1

      giveBound←{
          type←(181⌶)⍵
          type=11:0 1                                         ⍝ 11  : 1 bit boolean arrays
          type=80:⎕UCS 0 255                                  ⍝ 80  : 8 bits character
          type=83:¯128 127                                    ⍝ 83  : 8 bits signed integer
          type=160:⎕UCS 0 65535                               ⍝ 160 : 16 bits character
          type=163:¯32768 32767                               ⍝ 163 : 16 bits signed integer
          type=320:⎕UCS 0 1114111                             ⍝ 320 : 32 bits character
          type=323:¯2147483648 2147483647                     ⍝ 323 : 32 bits signed integer
          type=645:(⌈/⍬)(⌊/⍬)                                 ⍝ 645 : 64 bits floating
          ⎕FR←1287 ⋄ type=1287:(⌈/⍬)(⌊/⍬) ⋄ ⎕FR←645           ⍝ 1287: 128 bits decimal
          type=1289:{(-⍵),⍵,(+⍵),(-+⍵)}(⌈/⍬)(⊣+¯11○⊢)(⌊/⍬)    ⍝ 1289: 128 bits complex
      }

    ⍝ isCurrentlyRunning checks what test is running and returns a 1
    ⍝ if the test mentioned in ⍵ are running to simplify the if case
    ⍝ in RandModelTest to skip the test for certain primitives
    isCurrentlyRunning←{∨/⊃,/{∨/⍵⍷↑#.unittest.tests}¨⍵}

    ⍝ -------------------------
    ⍝ Generating Random Numbers
    ⍝ -------------------------

    ⍝ generating big random numbers upto 1E6144
    rollLimit←{⎕fr←1287 ⋄ ⍵<¯1+2*63 ⋄⎕fr←645} ⍝ limit of the roll(X?Y) primitive

    ⍝ generate 3 to 18 random numbers smaller than 1E17 and multiply them to get
    ⍝ a random number between 1E49 to 1E306
    bigRand308←{×/?(2+?16)/1E17}

    ⍝ takes a number from bigRand308 and picks 3 to 20 random numbers and multiplies
    ⍝ all of them to generate a random number between 1E308 to 1E6144
    bigRand308to6144←{×/change0sto1(2+?18)↑⍵}

    ⍝ rarg bigRand bound
    ⍝ uses bigRand308to6144 and bigRand308 to use the required random number generator
    ⍝ to generate a appropriate random number based on the bounds and the datatype
    ⍝
    ⍝        <---cmplx---> <-----decimal numbers running with 128 bit arithmetic----->  <numbers under ? limit> <floating point nos>
    bigRand←{1289≡⎕dr ⍵:⍺⋄(1287≡⎕dr ⍵) ∧ ⎕fr≡1287: {bigRand308to6144 bigRand308¨⍳20}¨⍺ ⋄ ⍺{rollLimit ⍵:?(≢⍺)/⍵ ⋄ (bigRand308¨⍺)}⍵}

    ⍝ todo: add this for characters when this runs for it
    ⍝ ⎕UCS ⍵ bigRand (⎕UCS 2⊃⍺)
    ⍝ normal cmplx number random:
    ⍝ {1⊃⍵ (⊣+¯11○⊢) 2⊃⍵}¨?⌊|(9 11○⊂)¨rarg

    ⍝ uses the appropriate random number generator for mixed, numeric or char arrays
    ⍝          ⍝ mixed array         ⍝ numeric             ⍝ char
    getRand←{¯1≡numOrChar ⍺:⍺ ⋄ ⍺{numOrChar ⍵: ⍺ bigRand 2⊃⍵ ⋄ ⍺}⍵}

    ⍝ -----------------------------
    ⍝ Generating Random Numbers End
    ⍝ -----------------------------

    ⍝ tests that don't use this are:
    ⍝ use a different runvariations:
    ⍝ - unique
    ⍝ - uniquemask
    ⍝ - indexof
    ⍝ - membership

    ⍝ Run Variations of each test with normal, empty and multiple shaped data
    ∇ {tRes}←spec(rawModel _RunVariations_ rawOp)args;ChkEqual;Eval;quadparams;runOrErr;shape;tCmt;tID;⎕CT;⎕DCT;⎕DIV;⎕FR;⎕IO
      tRes←⍬
      (tID tCmt quadparams)←spec
      ⎕CT ⎕DCT ⎕FR ⎕IO ⎕DIV←quadparams
      runOrErr←{
          0::⊂0 ⎕DMX.(EN Message)
          ⍺←⊢
          ⊂1(⍺ ⍺⍺ ⍵)
      }
     
      Eval←{
          2=≢args:⍺ ⍺⍺ ⍵
          1=≢args:⍺⍺ ⍵
          ⎕SIGNAL 5
      }
      ChkEqual←{
          (larg rarg)←2⍴⍺⍺¨args
          model←rawModel runOrErr
          op←rawOp runOrErr
          expected←larg model Eval rarg
          actual←larg op Eval rarg
          tRes,←(tID,' - ',⍵)tCmt Assert expected≡actual
      }
     
      ⍝ Base test: check that the function behaves as the model with the provided data
      {⍵}ChkEqual'Base'
     
      ⍝ scalar test: Pick a random item and check.
      {⍵[⊂?⍴⍵]}ChkEqual'RandomScalar'
     
      ⍝ Empty test: check that the function behaves as the model when given an empty vector of the given type.
      {0⍴⍵}ChkEqual'Empty'
     
      ⍝ High rank test: generate a random shape, and check.
      shape←{⎕IO←1 ⋄ ?(?⍵)/⍵}4
      {shape⍴⍵}ChkEqual'RandomHighRank'
     
      ⍝ High rank with 0 in shape test
      shape[?≢shape]←0
      {shape⍴⍵}ChkEqual'RandomEmptyHighRank'
     
      ⍝ Random data test:
      ⍝ This test creates a random element based on the datatype of the rarg and larg
      ⍝ it is then tested using models of the function.
      ⍝ The purpose of this test is to use the entire range of the datatype so a dataset
      ⍝ is generated in the longer run to test more data.
     
      ⍝ skipping big rand test for mentioned primitives because of issues with the model
      :If ~isCurrentlyRunning'residue' 'floor' 'multiply'
          {⎕FR←645 ⋄ ⍵ getRand giveBound ⍵}ChkEqual'RandModelTest'
      :EndIf
     
        ⍝ todo:
        ⍝ new variations needs more tests of:
        ⍝ lengths of arrays from 1 to 10000
        ⍝ and
        ⍝ of kind
        ⍝ scalar
        ⍝ vector
        ⍝ tall matrix, 11-column matrix with 10*0 1 2 4 rows
        ⍝ wide matrix, 11-row matrix with 10*0 1 2 4 columns
        ⍝ square matrix with ⌈10*0 1 2 4×0.6 (1 4 16 252) rows/columns
    ∇
:EndNamespace
