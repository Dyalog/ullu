:Namespace test_membership
    assert←#.unittest.assert

    ⍝ Read more about DR: https://help.dyalog.com/latest/#Language/System%20Functions/Data%20Representation%20Monadic.htm
    ⍝ Read more about CT and DCT: https://help.dyalog.com/latest/#Language/System%20Functions/ct.htm
    ∇ r←Test_Membership ;w;n;r;data;data2;type;bool;i1;char1;char2;i2;char3;i3;ptr;dbl;fl;cmplx;Hdbl;Hfl;Hcmplx;d;ct
        bool←0 1                                ⍝ 11: 1 bit Boolean type arrays
        i1←¯60+⍳120                             ⍝ 83: 8 bits signed integer
        char1←⎕UCS ⍳255                         ⍝ 80: 8 bits character
        char2←⎕UCS (1000+⍳100)                  ⍝ 160: 16 bits character
        i2←{⍵,-⍵}10000+⍳1000                    ⍝ 163: 16 bits signed integer
        char3←⎕UCS (100000+⍳100)                ⍝ 320: 32 bits character
        i3←{⍵,-⍵}100000+⍳100                    ⍝ 323: 32 bits signed  integer
        ptr←2,/⎕A                               ⍝ 326: Pointer (32-bit or 64-bit as appropriate)
        dbl←{⍵,-⍵}i3+0.1                        ⍝ 645: 64 bits Floating
        ⎕FR←1287 ⋄ fl←{⍵,-⍵}i3+0.01 ⋄ ⎕FR←645    ⍝ 1287: 128 bits Decimal
        cmplx←{⍵,-⍵}(0J1×⍳100)+⌽⍳100            ⍝ 1289: 128 bits Complex
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)                     ⍝ 645: 64 bits Floating
        ⎕FR←1287 ⋄ Hfl←{⍵,-⍵}2E15+(500×⍳10) ⋄ ⎕FR←645  ⍝ 1287: 128 bits Decimal
        Hcmplx←{⍵,-⍵}(1E14J1E14×⍳20)            ⍝ 1289: 128 bits Complex

        r←⍬
        :For ct :In 1 0 
            :If ct
                ⎕CT←1E¯14
                ⎕DCT←1E¯28
            :Else
                ⎕CT←0
                ⎕DCT←0
            :EndIf               
            :For data :In bool i1 i2 i3 char1 char2 char3 ptr dbl fl cmplx Hdbl Hfl Hcmplx
                :If 11≠type←⎕DR data
                    ⍝ Cross DR testing
                    :For data2 :In i1 i2 i3 char1 char2 char3 ptr dbl fl cmplx Hdbl Hfl Hcmplx
                        :If (data≡data2)
                            r,←assert (((≢data)⍴1) ≡ (data∊data2)) 'tcross0' ('for ⎕DR'(⎕DR data)'and'(⎕DR data2)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT)
                            :Continue
                        :EndIf
                        r,←assert (((≢data)⍴0) ≡ (data∊data2)) 'tcross1' ('for ⎕DR'(⎕DR data)'and'(⎕DR data2)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT) ⍝ no match, all return 0
                        r,←assert (((≢data2)⍴0) ≡ (data2∊data)) 'tcross2' ('for ⎕DR'(⎕DR data)'and'(⎕DR data2)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT) ⍝ no match, all return 0
                        r,←assert (((≢data)⍴1) ≡ (data∊data,data2)) 'tcross3' ('for ⎕DR'(⎕DR data)'and'(⎕DR data2)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT) ⍝ first data match, returns 1
                        r,←assert ((((≢data)⍴1),((≢data2)⍴0))≡((data,data2)∊data)) 'tcross4' ('for ⎕DR'(⎕DR data)'and'(⎕DR data2)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT) ⍝ data match, data2 no match
                    :EndFor
                    r,←assert ((data[?≢data])∊data) 't1' ('for ⎕DR'(⎕DR data)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT)                  ⍝ random element is found
                    r,←assert (((((≢data)-1)⍴0), 1)≡data∊(¯1↑data)) 't2' ('for ⎕DR'(⎕DR data)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT)  ⍝ All elements return 0 except last
                    r,←assert (((≢data)⍴1)≡data∊data) 't3' ('for ⎕DR'(⎕DR data)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT)                ⍝ all elements return 1
                    r,←assert (0≡5E50∊data) 't4' ('for ⎕DR'(⎕DR data)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT)                          ⍝ huge element outside set is not found
                    d←data[?≢data]
                    :If ct
                        :If (((⎕DR data) ∊ 80 83 160 163 320 323 326)) ∨ (data≡dbl) ∨ (data≡fl) ∨ (data≡cmplx)
                            :continue
                        :EndIf
                        r,←assert (1≡(d∊d+1)) 'CTDefault' ('for ⎕DR'(⎕DR d)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT)
                    :Else
                        :If ((⎕DR data) ∊ 80 160 320 326)
                            :continue
                        :EndIf
                        r,←assert (0≡(d∊d+1)) 'CTZero' ('for ⎕DR'(⎕DR d)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT)
                    :EndIf
                :Else ⍝ Booleans need special tests
                    ⍝ Boolean tests here because the domain is so small
                    r,←assert (0∊0) 'tb1' ('for ⎕DR'(⎕DR data)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT)
                    r,←assert (~0∊1) 'tb2' ('for ⎕DR'(⎕DR data)'with ⎕CT, ⎕DCT:'⎕CT','⎕DCT)
                    r,←assert (1 1≡bool∊bool) 'tb3' ('for ⎕DR', ⎕DR bool)
                    :For data2 :In i1 i2 i3 char1 char2 char3 ptr dbl fl cmplx ⍝ bool requires separate cross tests because of overlap with i1
                        :If (83≠type←⎕DR data2) ⍝ special case because of overlap
                                r,←assert (((≢bool)⍴0) ≡ (bool∊data2)) 'tcrossBool' ('for ⎕DR', (⎕DR bool), 'and', (⎕DR data2)) ⍝ All elements return 0
                                r,←assert (((≢data2)⍴0) ≡ (data2∊bool)) 'tcrossBool' ('for ⎕DR', (⎕DR bool), 'and', (⎕DR data2)) ⍝ All elements return 0
                        :Else
                            r,←assert (((≢bool)⍴1) ≡ (bool∊data2)) 'tcrossBool' ('for ⎕DR', (⎕DR bool), 'and', (⎕DR data2)) ⍝ All elements return 1
                            r,←assert (((⊣,(⌽⊣))((1↓((≢i1)÷2)⍴0),1)) ≡ (data2∊bool)) 'tcrossBool' ('for ⎕DR', (⎕DR bool), 'and', (⎕DR data2)) ⍝ overlaping 0 1 returns 1
                        :EndIf
                    :EndFor
                :EndIf
            :EndFor
        :EndFor
    ∇
:EndNamespace
