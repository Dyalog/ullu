:Namespace test_membership
    ⍝ Assert takes 4 mandatory arguments [result=1|0] [testID] [iterator] [miscData]
    ∇ r←assert args ;r;testID;i;miscData;stop;verbose;FAIL_OK ⍝ to output result of tests
        verbose←#.unittest.verbose
        stop←#.unittest.stop

        (r testID miscData)←args

        FAIL_OK←'[FAIL]' '[OK]' ⍝ 1+bool will give fail and ok on 0 and 1

        ⍝ TODO create one output rather than again and again printing
        :If (~r)∧stop
            ⎕←testID,' ', miscData, ': ', FAIL_OK[1+r]
            'Stopping on failure of:' ⎕SIGNAL 500
        :EndIf
        :If verbose
            ⎕←testID,' ', miscData, ':', FAIL_OK[1+r]
        :ElseIf ~r∨stop
            ⎕←testID,' ', miscData, ':', FAIL_OK[1+r]
        :EndIf
    ∇

    ⍝ This section of testcases are categorised based on the ⎕DR model.
    ⍝ Read more: https://help.dyalog.com/latest/#Language/System%20Functions/Data%20Representation%20Monadic.htm
    :Section Testing for all datatypes
        ∇ r←Test_DR ;bool;i1;char1;char2;i2;char3;i3;ptr;dbl;fl;cmplx;data;i;type
            bool←0 1                                ⍝ 11: 1 bit Boolean type arrays
            i1←¯60+⍳120                             ⍝ 83: 8 bits signed integer
            char1←⎕UCS ⍳255                         ⍝ 80: 8 bits character
            char2←⎕UCS ⍳10000                       ⍝ 160: 16 bits character
            i2←{⍵,-⍵}10000+⍳1000                    ⍝ 163: 16 bits signed integer
            char3←⎕UCS ⍳100000                      ⍝ 320: 32 bits character
            i3←{⍵,-⍵}100000+⍳1000                   ⍝ 323: 32 bits signed  integer
            ptr←2,/⎕A                               ⍝ 326: Pointer (32-bit or 64-bit as appropriate)
            dbl←{⍵,-⍵}i3+0.1                        ⍝ 645: 64 bits Floating
            ⎕FR←1287 ⋄ fl←{⍵,-⍵}i3+0.01 ⋄ ⎕FR←645   ⍝ 1287: 128 bits Decimal
            cmplx←{⍵,-⍵}(0J1×⍳10000)+⌽⍳10000       ⍝ 1289: 128 bits Complex

            r←⍬
            :For data :In bool i1 i2 i3 char1 char2 char3 ptr dbl fl cmplx
                :If 11≠type←⎕DR data
                    r,←assert ((data[?≢data])∊data) 't1' ('for ⎕DR', ⎕DR data)  ⍝ random element is found
                    r,←assert (((((≢data)-1)⍴0), 1)≡data∊(¯1↑data)) 't2' ('for ⎕DR', ⎕DR data) ⍝ All elements return 0 except last
                    r,←assert (((≢data)⍴1)≡data∊data) 't3' ('for ⎕DR', ⎕DR data) ⍝ all elements return 1
                    :If (80≠type←⎕DR data)∧(160≠type←⎕DR data)∧(320≠type←⎕DR data)⍝ ⎕UCS conversion reqd for char
                        :If 326=type←⎕DR data ⍝ not relevant for ptr
                            :continue
                        :EndIf
                        ⍝ todo: try to get rid of special case
                        r,←assert (~((⊃data)-1)∊data) 't4.1' ('for ⎕DR', ⎕DR data) ⍝ element outside set is not found
                    :Else
                        r,←assert (~(⎕UCS((⎕UCS(⊃data))-1))∊data) 't4.2' ('for ⎕DR', ⎕DR data) ⍝ element outside set is not found
                    :EndIf
                    ⍝ Todo: add more tests
                :Else ⍝ Booleans need special tests
                    ⍝ Boolean tests here because the domain is so small
                    r,←assert (0∊0) 'tb1' ('for ⎕DR', ⎕DR data)
                    r,←assert (~0∊1) 'tb2' ('for ⎕DR', ⎕DR data)
                    r,←assert (1 1≡bool∊bool) 'tb3' ('for ⎕DR', ⎕DR bool)
                :EndIf
            :EndFor
        ∇
    :EndSection

    ⍝ Tests based upon ⎕CT value
    ⍝ Read more: https://help.dyalog.com/latest/#Language/System%20Functions/ct.htm
    :Section Based on CT
        ⍝ TODO
    :EndSection

:EndNamespace
