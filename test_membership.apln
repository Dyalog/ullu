:Namespace test_membership
    Assert←#.unittest.Assert

    ⍝ evaluate each test with normal, empty and multiple shaped data
    ∇ tRes←tData Eval exp ;acR;acRE;exR;left;right;res;tID;tCmt
        (exR left right)←exp
        (tID tCmt)←tData
        tRes←⍬

        ⍝ normal
        acR←left∊right ⍝ actual result
        res←exR≡acR
        tRes,←tData Assert res

        ⍝ empty
        acRE←left∊(0⍴⊂right) ⍝ generating empty array from right
        res←(0×exR)≡acRE ⍝ all 0s in exR is the new expected result
        tRes,←('Empty',tID) tCmt Assert res

        ⍝ different shapes
        leftshape←?⍳?7
        rightshape←{(×/(x←?(?7)/?12))>≢right:x ⋄ ∇⍵}⍬
        res←(leftshape⍴exR) ≡ (leftshape⍴left)∊(rightshape⍴right)
        tRes,←('Multiple',tID) tCmt Assert res
    ∇

    ⍝ Read more about DR: https://help.dyalog.com/latest/#Language/System%20Functions/Data%20Representation%20Monadic.htm
    ⍝ Read more about CT and DCT: https://help.dyalog.com/latest/#Language/System%20Functions/ct.htm
    ∇ r←Test_Membership ;w;n;r;data;case;data2;case2;type;bool;i1;char1;char2;i2;char3;i3;ptr;dbl;fl;cmplx;Hdbl;Hfl;Hcmplx;d;ct;fr;⎕CT;⎕DCT;⎕FR;ct_default;dct_default;fr_dbl;fr_decf;testDesc;desc
        bool←0 1                                      ⍝ 11: 1 bit Boolean type arrays
        i1←¯60+⍳120                                   ⍝ 83: 8 bits signed integer
        char1←⎕UCS ⍳255                               ⍝ 80: 8 bits character
        char2←⎕UCS (1000+⍳100)                        ⍝ 160: 16 bits character
        i2←{⍵,-⍵}10000+⍳100                           ⍝ 163: 16 bits signed integer
        char3←⎕UCS (100000+⍳100)                      ⍝ 320: 32 bits character
        i3←{⍵,-⍵}100000+⍳100                          ⍝ 323: 32 bits signed  integer
        ptr←2,/⎕A                                     ⍝ 326: Pointer (32-bit or 64-bit as appropriate)
        dbl←{⍵,-⍵}i3+0.1                              ⍝ 645: 64 bits Floating
        ⎕FR←1287 ⋄ fl←{⍵,-⍵}i3+0.01 ⋄ ⎕FR←645         ⍝ 1287: 128 bits Decimal
        cmplx←{⍵,-⍵}(0J1×⍳100)+⌽⍳100                  ⍝ 1289: 128 bits Complex
        ⍝ Hdbl is 645 but higher order to test for CT value
        ⍝ intervals of 2 are chosen because CT for these numbers +1 and -1
        ⍝ come under the region of tolerant equality
        Hdbl←{⍵,-⍵}1E14+(2×⍳50)
        ⍝ Hfl is 1287 but higher order to test for CT value
        ⍝ far intervals are chosen for non overlap 
        ⍝ with region of tolerant equality
        ⎕FR←1287 ⋄ Hfl←{⍵,-⍵}2E29+(1E16×⍳10) ⋄ ⎕FR←645 
        Hcmplx←{⍵,-⍵}(1E14J1E14×⍳20)                  ⍝ 1289 but higher order to test for CT value

        ct_default←1E¯14
        dct_default←1E¯28
        fr_dbl←645
        fr_decf←1287

        r←⍬
        testDesc←{'for ',case,{0∊⍴case2:'',⍵⋄' , ', case2,⍵},' & ⎕CT ⎕DCT:',⎕CT,⎕DCT, '& ⎕FR:', ⎕FR}

        :For ct :In 1 0 
            (⎕CT ⎕DCT)←ct × ct_default dct_default ⍝ set comparision tolerance

            :For fr :In 1 2
                ⎕FR←fr⊃fr_dbl fr_decf

                :For case :In 'i1' 'i2' 'i3' 'char1' 'char2' 'char3' 'ptr' 'dbl' 'fl' 'cmplx' 'Hdbl' 'Hfl' 'Hcmplx'
                    data←⍎case
                    :If ⎕FR=fr_decf ∧ 1289=⎕DR data ⍝ ⎕FR=1287 is not recommended to be used with cmplx
                        :Continue
                    :EndIf

                    ⍝ Cross type tests
                    :For case2 :In 'i1' 'i2' 'i3' 'char1' 'char2' 'char3' 'ptr' 'dbl' 'fl' 'cmplx' 'Hdbl' 'Hfl' 'Hcmplx'
                        data2←⍎case2
                        desc←testDesc⍬
                        :If (data≡data2)
                            r,←'TCross0' desc Eval ((≢data)⍴1) data data2
                            :Continue
                        :EndIf
                        r,← 'TCross1' desc Eval ((≢data)⍴0) data data2                       ⍝ no match, all return 0
                        r,← 'TCross2' desc Eval ((≢data2)⍴0) data2 data                      ⍝ no match, all return 0
                        r,← 'TCross3' desc Eval ((≢data)⍴1) data (data,data2)                  ⍝ first data match, returns 1
                        r,← 'TCross4' desc Eval (((≢data)⍴1),((≢data2)⍴0)) (data,data2) data ⍝ data match, data2 no match
                    :EndFor
                    case2←⍬ ⍝ disposing case2 for testDesc
                    desc←testDesc⍬

                    ⍝ same type tests
                    r,← 'T1' desc Eval 1 (data[?≢data]) data                  ⍝ random element is found
                    r,← 'T2' desc Eval ((((≢data)-1)⍴0), 1) data (¯1↑data)  ⍝ All elements return 0 except last
                    r,← 'T3' desc Eval ((≢data)⍴1) data data                ⍝ all elements return 1
                    r,← 'T4' desc Eval 0 5E50 data                          ⍝ huge element outside set is not found

                    ⍝ todo: change these to settle with Eval when Eval matures
                    ⍝ tests with comparision tolerance
                    d←data[?≢data]
                    :If ct ⍝ tolerant
                        ⍝ case for CT default & is skipped for FR=1287
                        :If (⊂data)∊Hdbl Hfl Hcmplx
                            ⍝ Hdbl=Hdbl+1 with default CT, but not for DECF
                            r,← 'CTDefault' desc Assert ((1≡(d∊d+1)) ∨ (fr=2 ∧ case≡'Hdbl'))
                        :EndIf
                    :Else  ⍝ exact
                        :If ~(⎕DR data) ∊ 80 160 320 326 ⍝ non-numeric are skipped
                            ⍝ d≠d+1 for all numeric types, except when Hfl represented as DOUB
                            r,← 'CTZero' desc Assert ((0≡(d∊d+1)) ∨ (fr=1 ∧ case≡'Hfl'))
                        :EndIf
                    :EndIf
                :EndFor

                ⍝ ⍝ Booleans need special tests
                case←'bool'
                desc←testDesc⍬

                r,← 'TB1' desc Eval 1 0 0
                r,← 'TB2' desc Eval 1 (~0) 1
                r,← 'TB3' desc Eval (1 1) bool bool
                
                ⍝ Boolean cross type tests
                :For case2 :In 'i1' 'i2' 'i3' 'char1' 'char2' 'char3' 'ptr' 'dbl' 'fl' 'cmplx'  'Hdbl' 'Hfl' 'Hcmplx'
                    data2←⍎case2
                    desc←testDesc⍬
                    :If (83≠type←⎕DR data2) ⍝ bool requires separate cross tests because of overlap with i1
                        r,← 'TCrossBool1' desc Eval ((≢bool)⍴0) bool data2      ⍝ All elements return 0
                        r,← 'TCrossBool2' desc Eval ((≢data2)⍴0) data2 bool      ⍝ All elements return 0
                    :Else
                        r,← 'TCrossBooli1' desc Eval ((≢bool)⍴1) bool data2     ⍝ All elements return 1
                        r,← 'TCrossBooli2' desc Eval ({⍵,(⌽⍵)}((1↓((≢i1)÷2)⍴0),1)) data2 bool ⍝ overlaping 0 1 returns 1
                    :EndIf
                :EndFor
                case2←⍬
            :EndFor
        :EndFor

    ∇
:EndNamespace
